<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="indexpage" kind="page">
    <compoundname>index</compoundname>
    <title>RadioHead Packet Radio library for embedded microprocessors</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>This is the RadioHead Packet Radio library for embedded microprocessors. It provides a complete object-oriented library for sending and receiving packetized messages via a variety of common data radios and other transports on a range of embedded microprocessors.</para>
<para>The version of the package that this documentation refers to can be downloaded from <ulink url="http://www.airspayce.com/mikem/arduino/RadioHead/RadioHead-1.59.zip">http://www.airspayce.com/mikem/arduino/RadioHead/RadioHead-1.59.zip</ulink> You can find the latest version at <ulink url="http://www.airspayce.com/mikem/arduino/RadioHead">http://www.airspayce.com/mikem/arduino/RadioHead</ulink></para>
<para>You can also find online help and discussion at <ulink url="http://groups.google.com/group/radiohead-arduino">http://groups.google.com/group/radiohead-arduino</ulink> Please use that group for all questions and discussions on this topic. Do not contact the author directly, unless it is to discuss commercial licensing. Before asking a question or reporting a bug, please read<itemizedlist>
<listitem><para><ulink url="http://en.wikipedia.org/wiki/Wikipedia:Reference_desk/How_to_ask_a_software_question">http://en.wikipedia.org/wiki/Wikipedia:Reference_desk/How_to_ask_a_software_question</ulink></para>
</listitem><listitem><para><ulink url="http://www.catb.org/esr/faqs/smart-questions.html">http://www.catb.org/esr/faqs/smart-questions.html</ulink></para>
</listitem><listitem><para><ulink url="http://www.chiark.greenend.org.uk/~shgtatham/bugs.html">http://www.chiark.greenend.org.uk/~shgtatham/bugs.html</ulink></para>
</listitem></itemizedlist>
</para>
<para><simplesect kind="par"><title>Overview</title><para></para>
</simplesect>
RadioHead consists of 2 main sets of classes: Drivers and Managers.</para>
<para><itemizedlist>
<listitem><para>Drivers provide low level access to a range of different packet radios and other packetized message transports.</para>
</listitem><listitem><para>Managers provide high level message sending and receiving facilities for a range of different requirements.</para>
</listitem></itemizedlist>
</para>
<para>Every RadioHead program will have an instance of a Driver to provide access to the data radio or transport, and a Manager that uses that driver to send and receive messages for the application. The programmer is required to instantiate a Driver and a Manager, and to initialise the Manager. Thereafter the facilities of the Manager can be used to send and receive messages.</para>
<para>It is also possible to use a Driver on its own, without a Manager, although this only allows unaddressed, unreliable transport via the Driver&apos;s facilities.</para>
<para>In some specialised use cases, it is possible to instantiate more than one Driver and more than one Manager.</para>
<para>A range of different common embedded microprocessor platforms are supported, allowing your project to run on your choice of processor.</para>
<para>Example programs are included to show the main modes of use.</para>
<para><simplesect kind="par"><title>Drivers</title><para></para>
</simplesect>
The following Drivers are provided:</para>
<para><itemizedlist>
<listitem><para>RH_RF22 Works with Hope-RF RF22B and RF23B based transceivers, and compatible chips and modules, including the RFM22B transceiver module such as this bare module: <ulink url="http://www.sparkfun.com/products/10153">http://www.sparkfun.com/products/10153</ulink> and this shield: <ulink url="http://www.sparkfun.com/products/11018">http://www.sparkfun.com/products/11018</ulink> and this board: <ulink url="http://www.anarduino.com/miniwireless">http://www.anarduino.com/miniwireless</ulink> and RF23BP modules such as: <ulink url="http://www.anarduino.com/details.jsp?pid=130">http://www.anarduino.com/details.jsp?pid=130</ulink> Supports GFSK, FSK and OOK. Access to other chip features such as on-chip temperature measurement, analog-digital converter, transmitter power control etc is also provided.</para>
</listitem><listitem><para>RH_RF24 Works with Silicon Labs Si4460/4461/4463/4464 family of transceivers chip, and the equivalent HopeRF RF24/26/27 family of chips and the HopeRF RFM24W/26W/27W modules. Supports GFSK, FSK and OOK. Access to other chip features such as on-chip temperature measurement, analog-digital converter, transmitter power control etc is also provided.</para>
</listitem><listitem><para>RH_RF69 Works with Hope-RF RF69B based radio modules, such as the RFM69 module, (as used on the excellent Moteino and Moteino-USB boards from LowPowerLab <ulink url="http://lowpowerlab.com/moteino/">http://lowpowerlab.com/moteino/</ulink> ) and compatible chips and modules such as RFM69W, RFM69HW, RFM69CW, RFM69HCW (Semtech SX1231, SX1231H). Also works with Anarduino MiniWireless -CW and -HW boards <ulink url="http://www.anarduino.com/miniwireless/">http://www.anarduino.com/miniwireless/</ulink> including the marvellous high powered MinWireless-HW (with 20dBm output for excellent range). Supports GFSK, FSK.</para>
</listitem><listitem><para>RH_NRF24 Works with Nordic nRF24 based 2.4GHz radio modules, such as nRF24L01 and others. Also works with Hope-RF RFM73 and compatible devices (such as BK2423). nRF24L01 and RFM73 can interoperate with each other.</para>
</listitem><listitem><para>RH_NRF905 Works with Nordic nRF905 based 433/868/915 MHz radio modules.</para>
</listitem><listitem><para>RH_NRF51 Works with Nordic nRF51 compatible 2.4 GHz SoC/devices such as the nRF51822.</para>
</listitem><listitem><para><ref refid="classRH__RF95" kindref="compound">RH_RF95</ref> Works with Semtech SX1276/77/78/79, Modtronix inAir4 and inAir9, and HopeRF RFM95/96/97/98 and other similar LoRa capable radios. Supports Long Range (LoRa) with spread spectrum frequency hopping, large payloads etc. FSK/GFSK/OOK modes are not (yet) supported.</para>
</listitem><listitem><para>RH_MRF89 Works with Microchip MRF89XA and compatible transceivers. and modules such as MRF89XAM9A.</para>
</listitem><listitem><para>RH_CC110 Works with Texas Instruments CC110L transceivers and compatible modules such as Anaren AIR BoosterPack 430BOOST-CC110L</para>
</listitem><listitem><para>RH_ASK Works with a range of inexpensive ASK (amplitude shift keying) RF transceivers such as RX-B1 (also known as ST-RX04-ASK) receiver; TX-C1 transmitter and DR3100 transceiver; FS1000A/XY-MK-5V transceiver; HopeRF RFM83C / RFM85. Supports ASK (OOK).</para>
</listitem><listitem><para>RH_Serial Works with RS232, RS422, RS485, RS488 and other point-to-point and multidropped serial connections, or with TTL serial UARTs such as those on Arduino and many other processors, or with data radios with a serial port interface. RH_Serial provides packetization and error detection over any hardware or virtual serial connection. Also builds and runs on Linux and OSX.</para>
</listitem><listitem><para>RH_TCP For use with simulated sketches compiled and running on Linux. Works with tools/etherSimulator.pl to pass messages between simulated sketches, allowing testing of Manager classes on Linux and without need for real radios or other transport hardware.</para>
</listitem></itemizedlist>
</para>
<para>Drivers can be used on their own to provide unaddressed, unreliable datagrams. All drivers have the same identical API. Or you can use any Driver with any of the Managers described below.</para>
<para>We welcome contributions of well tested and well documented code to support other transports.</para>
<para><simplesect kind="par"><title>Managers</title><para></para>
</simplesect>
The following Mangers are provided:</para>
<para><itemizedlist>
<listitem><para>RHDatagram Addressed, unreliable variable length messages, with optional broadcast facilities.</para>
</listitem><listitem><para>RHReliableDatagram Addressed, reliable, retransmitted, acknowledged variable length messages.</para>
</listitem><listitem><para>RHRouter Multi-hop delivery from source node to destination node via 0 or more intermediate nodes, with manual routing.</para>
</listitem><listitem><para>RHMesh Multi-hop delivery with automatic route discovery and rediscovery.</para>
</listitem></itemizedlist>
</para>
<para>Any Manager may be used with any Driver.</para>
<para><simplesect kind="par"><title>Platforms</title><para></para>
</simplesect>
A range of platforms is supported:</para>
<para><itemizedlist>
<listitem><para>Arduino and the Arduino IDE (version 1.0 to 1.6.5 and later) Including Diecimila, Uno, Mega, Leonardo, Yun, Due, Zero etc. <ulink url="http://arduino.cc/">http://arduino.cc/</ulink>, Also similar boards such as<itemizedlist>
<listitem><para>Moteino <ulink url="http://lowpowerlab.com/moteino/">http://lowpowerlab.com/moteino/</ulink></para>
</listitem><listitem><para>Anarduino Mini <ulink url="http://www.anarduino.com/mini/">http://www.anarduino.com/mini/</ulink></para>
</listitem><listitem><para>RedBearLab Blend V1.0 <ulink url="http://redbearlab.com/blend/">http://redbearlab.com/blend/</ulink> (with Arduino 1.0.5 and RedBearLab Blend Add-On version 20140701)</para>
</listitem><listitem><para>MoteinoMEGA <ulink url="https://lowpowerlab.com/shop/moteinomega">https://lowpowerlab.com/shop/moteinomega</ulink> (with Arduino 1.0.5 and the MoteinoMEGA Arduino Core <ulink url="https://github.com/LowPowerLab/Moteino/tree/master/MEGA/Core">https://github.com/LowPowerLab/Moteino/tree/master/MEGA/Core</ulink>)</para>
</listitem><listitem><para>ESP8266 on Arduino IDE and Boards Manager per <ulink url="https://github.com/esp8266/Arduino">https://github.com/esp8266/Arduino</ulink> Tested using Arduino 1.6.5 with esp8266 by ESP8266 Community version 2.0.0 Examples serial_reliable_datagram_* and ask_* are shown to work. CAUTION: SPI not supported yet. The GHz radio included in the ESP8266 is not yet supported.</para>
</listitem><listitem><para>etc.</para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para>ChipKIT Core with Arduino IDE on any ChipKIT Core supported Digilent processor (tested on Uno32) <ulink url="http://chipkit.net/wiki/index.php?title=ChipKIT_core">http://chipkit.net/wiki/index.php?title=ChipKIT_core</ulink></para>
</listitem><listitem><para>Maple and Flymaple boards with libmaple and the Maple-IDE development environment <ulink url="http://leaflabs.com/devices/maple/">http://leaflabs.com/devices/maple/</ulink> and <ulink url="http://www.open-drone.org/flymaple">http://www.open-drone.org/flymaple</ulink></para>
</listitem><listitem><para>Teensy including Teensy 3.1 and earlier built using Arduino IDE 1.0.5 to 1.6.4 and later with teensyduino addon 1.18 to 1.23 and later. <ulink url="http://www.pjrc.com/teensy">http://www.pjrc.com/teensy</ulink></para>
</listitem><listitem><para>Particle Photon <ulink url="https://store.particle.io/collections/photon">https://store.particle.io/collections/photon</ulink> and ARM3 based CPU with built-in Wi-Fi transceiver and extensive IoT software suport. RadioHead does not support the built-in transceiver bt can be used to control other SPI based radios, Serial ports etc. See below for details on how to build RadioHead for Photon</para>
</listitem><listitem><para>ATtiny built using Arduino IDE 1.0.5 with the arduino-tiny support from <ulink url="https://code.google.com/p/arduino-tiny/">https://code.google.com/p/arduino-tiny/</ulink> and Digispark built with Arduino 1.6.5. (Caution: these are very small processors and not all RadioHead features may be available, depending on memory requirements)</para>
</listitem><listitem><para>nRF51 compatible Arm chips such as nRF51822 with Arduino 1.6.4 and later using the procedures in <ulink url="http://redbearlab.com/getting-started-nrf51822/">http://redbearlab.com/getting-started-nrf51822/</ulink></para>
</listitem><listitem><para>Raspberry Pi Uses BCM2835 library for GPIO <ulink url="http://www.airspayce.com/mikem/bcm2835/">http://www.airspayce.com/mikem/bcm2835/</ulink> Currently works only with RH_NRF24 driver or other drivers that do not require interrupt support. Contributed by Mike Poublon.</para>
</listitem><listitem><para>Linux and OSX Using the RHutil/HardwareSerial class, the RH_Serial driver and any manager will build and run on Linux and OSX. These can be used to build programs that talk securely and reliably to Arduino and other processors or to other Linux or OSX hosts on a reliable, error detected datagram protocol over a serial line.</para>
</listitem></itemizedlist>
</para>
<para>Other platforms are partially supported, such as Generic AVR 8 bit processors, MSP430. We welcome contributions that will expand the range of supported platforms.</para>
<para>RadioHead is available (through the efforts of others) for PlatformIO. PlatformIO is a cross-platform code builder and the missing library manager. <ulink url="http://platformio.org/#!/lib/show/124/RadioHead">http://platformio.org/#!/lib/show/124/RadioHead</ulink></para>
<para><simplesect kind="par"><title>History</title><para></para>
</simplesect>
RadioHead was created in April 2014, substantially based on code from some of our other earlier Radio libraries:</para>
<para><itemizedlist>
<listitem><para>RHMesh, RHRouter, RHReliableDatagram and RHDatagram are derived from the RF22 library version 1.39.</para>
</listitem><listitem><para>RH_RF22 is derived from the RF22 library version 1.39.</para>
</listitem><listitem><para>RH_RF69 is derived from the RF69 library version 1.2.</para>
</listitem><listitem><para>RH_ASK is based on the VirtualWire library version 1.26, after significant conversion to C++.</para>
</listitem><listitem><para>RH_Serial was new.</para>
</listitem><listitem><para>RH_NRF24 is based on the NRF24 library version 1.12, with some significant changes.</para>
</listitem></itemizedlist>
</para>
<para>During this combination and redevelopment, we have tried to retain all the processor dependencies and support from the libraries that were contributed by other people. However not all platforms can be tested by us, so if you find that support from some platform has not been successfully migrated, please feel free to fix it and send us a patch.</para>
<para>Users of RHMesh, RHRouter, RHReliableDatagram and RHDatagram in the previous RF22 library will find that their existing code will run mostly without modification. See the RH_RF22 documentation for more details.</para>
<para><simplesect kind="par"><title>Installation</title><para></para>
</simplesect>
Install in the usual way: unzip the distribution zip file to the libraries sub-folder of your sketchbook. The example sketches will be visible in in your Arduino, mpide, maple-ide or whatever. <ulink url="http://arduino.cc/en/Guide/Libraries">http://arduino.cc/en/Guide/Libraries</ulink></para>
<para><simplesect kind="par"><title>Building for Particle Photon</title><para></para>
</simplesect>
The Photon is not supported by the Arduino IDE, so it takes a little effort to set up a build environment. Heres what we did to enable building of RadioHead example sketches on Linux, but there are other ways to skin this cat. Basic reference for getting stated is: <ulink url="http://particle-firmware.readthedocs.org/en/develop/build/">http://particle-firmware.readthedocs.org/en/develop/build/</ulink><itemizedlist>
<listitem><para>Download the ARM gcc cross compiler binaries and unpack it in a suitable place: <programlisting><codeline><highlight class="normal">cd<sp/>/tmp</highlight></codeline>
<codeline><highlight class="normal">wget<sp/>https:</highlight><highlight class="comment">//launchpad.net/gcc-arm-embedded/5.0/5-2015-q4-major/+download/gcc-arm-none-eabi-5_2-2015q4-20151219-linux.tar.bz2</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">tar<sp/>xvf<sp/>gcc-arm-none-eabi-5_2-2015q4-20151219-linux.tar.bz2</highlight></codeline>
</programlisting></para>
</listitem><listitem><para>If dfu-util and friends not installed on your platform, download dfu-util and friends to somewhere in your path <programlisting><codeline><highlight class="normal">cd<sp/>~/bin</highlight></codeline>
<codeline><highlight class="normal">wget<sp/>http:</highlight><highlight class="comment">//dfu-util.sourceforge.net/releases/dfu-util-0.8-binaries/linux-i386/dfu-util</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">wget<sp/>http:</highlight><highlight class="comment">//dfu-util.sourceforge.net/releases/dfu-util-0.8-binaries/linux-i386/dfu-suffix</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">wget<sp/>http:</highlight><highlight class="comment">//dfu-util.sourceforge.net/releases/dfu-util-0.8-binaries/linux-i386/dfu-prefix</highlight></codeline>
</programlisting></para>
</listitem><listitem><para>Download the Particle firmware (contains headers and libraries require to compile Photon sketches) to a suitable place: <programlisting><codeline><highlight class="normal">cd<sp/>/tmp</highlight></codeline>
<codeline><highlight class="normal">wget<sp/>https:</highlight><highlight class="comment">//github.com/spark/firmware/archive/develop.zip</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">unzip<sp/>develop.zip</highlight></codeline>
</programlisting></para>
</listitem><listitem><para>Make a working area containing the RadioHead library source code and your RadioHead sketch. You must rename the sketch from .pde or .ino to application.cpp <programlisting><codeline><highlight class="normal"><sp/><sp/><sp/>cd<sp/>/tmp</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>mkdir<sp/>RadioHead</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>cd<sp/>RadioHead</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>cp<sp/>/usr/local/projects/arduino/libraries/RadioHead</highlight><highlight class="comment">/*.h<sp/>.</highlight></codeline>
<codeline><highlight class="comment">*<sp/><sp/>cp<sp/>/usr/local/projects/arduino/libraries/RadioHead/*.cpp<sp/>.</highlight></codeline>
<codeline><highlight class="comment">*<sp/><sp/>cp<sp/>/usr/local/projects/arduino/libraries/RadioHead/examples/cc110/cc110_client/cc110_client.pde<sp/>application.cpp</highlight></codeline>
<codeline><highlight class="comment">*<sp/><sp/></highlight></codeline>
</programlisting></para>
</listitem><listitem><para>Edit application.cpp and comment out any #include &lt;SPI.h&gt; so it looks like: <programlisting><codeline><highlight class="comment">//<sp/>#include<sp/>&lt;SPI.h&gt;</highlight></codeline>
</programlisting></para>
</listitem><listitem><para>Connect your Photon by USB. Put it in DFU mode as descibed in Photon documentation. Light should be flashing yellow</para>
</listitem><listitem><para>Compile the RadioHead sketch and install it as the user program (this does not update the rest of the Photon firmware, just the user part: <programlisting><codeline><highlight class="normal">cd<sp/>/tmp/firmware-develop/<ref refid="namespacehw1_1a1f2b74b7a32910acfc1c7b75abb31c05" kindref="member">main</ref></highlight></codeline>
<codeline><highlight class="normal">PATH=$PATH:/tmp/gcc-arm-none-eabi-5_2-2015q4/bin<sp/>make<sp/>APPDIR=/tmp/RadioHead<sp/>all<sp/>PLATFORM=photon<sp/>program-dfu</highlight></codeline>
</programlisting></para>
</listitem><listitem><para>You should see RadioHead compile without errors and download the finished sketch into the Photon.</para>
</listitem></itemizedlist>
</para>
<para><simplesect kind="par"><title>Compatible Hardware Suppliers</title><para></para>
</simplesect>
We have had good experiences with the following suppliers of RadioHead compatible hardware:</para>
<para><itemizedlist>
<listitem><para>LittleBird <ulink url="http://littlebirdelectronics.com.au">http://littlebirdelectronics.com.au</ulink> in Australia for all manner of Arduinos and radios.</para>
</listitem><listitem><para>LowPowerLab <ulink url="http://lowpowerlab.com/moteino">http://lowpowerlab.com/moteino</ulink> in USA for the excellent Moteino and Moteino-USB boards which include Hope-RF RF69B radios on-board.</para>
</listitem><listitem><para>Anarduino and HopeRF USA (<ulink url="http://www.hoperfusa.com">http://www.hoperfusa.com</ulink> and <ulink url="http://www.anarduino.com">http://www.anarduino.com</ulink>) who have a wide range of HopeRF radios and Arduino integrated modules.</para>
</listitem><listitem><para>SparkFun <ulink url="https://www.sparkfun.com/">https://www.sparkfun.com/</ulink> in USA who design and sell a wide range of Arduinos and radio modules.</para>
</listitem></itemizedlist>
</para>
<para><simplesect kind="par"><title>Donations</title><para></para>
</simplesect>
This library is offered under a free GPL license for those who want to use it that way. We try hard to keep it up to date, fix bugs and to provide free support. If this library has helped you save time or money, please consider donating at <ulink url="http://www.airspayce.com">http://www.airspayce.com</ulink> or here:</para>
<para><htmlonly> &lt;form action=&quot;https://www.paypal.com/cgi-bin/webscr&quot; method=&quot;post&quot;&gt;&lt;input type=&quot;hidden&quot; name=&quot;cmd&quot; value=&quot;_donations&quot; /&gt; &lt;input type=&quot;hidden&quot; name=&quot;business&quot; value=&quot;mikem@airspayce.com&quot; /&gt; &lt;input type=&quot;hidden&quot; name=&quot;lc&quot; value=&quot;AU&quot; /&gt; &lt;input type=&quot;hidden&quot; name=&quot;item_name&quot; value=&quot;Airspayce&quot; /&gt; &lt;input type=&quot;hidden&quot; name=&quot;item_number&quot; value=&quot;RadioHead&quot; /&gt; &lt;input type=&quot;hidden&quot; name=&quot;currency_code&quot; value=&quot;USD&quot; /&gt; &lt;input type=&quot;hidden&quot; name=&quot;bn&quot; value=&quot;PP-DonationsBF:btn_donateCC_LG.gif:NonHosted&quot; /&gt; &lt;input type=&quot;image&quot; alt=&quot;PayPal — The safer, easier way to pay online.&quot; name=&quot;submit&quot; src=&quot;https://www.paypalobjects.com/en_AU/i/btn/btn_donateCC_LG.gif&quot; /&gt; &lt;img alt=&quot;&quot; src=&quot;https://www.paypalobjects.com/en_AU/i/scr/pixel.gif&quot; width=&quot;1&quot; height=&quot;1&quot; border=&quot;0&quot; /&gt;&lt;/form&gt; </htmlonly></para>
<para><simplesect kind="par"><title>Trademarks</title><para></para>
</simplesect>
RadioHead is a trademark of AirSpayce Pty Ltd. The RadioHead mark was first used on April 12 2014 for international trade, and is used only in relation to data communications hardware and software and related services. It is not to be confused with any other similar marks covering other goods and services.</para>
<para><simplesect kind="par"><title>Copyright</title><para></para>
</simplesect>
This software is Copyright (C) 2011-2016 Mike McCauley. Use is subject to license conditions. The main licensing options available are GPL V2 or Commercial:</para>
<para><simplesect kind="par"><title>Open Source Licensing GPL V2</title><para></para>
</simplesect>
This is the appropriate option if you want to share the source code of your application with everyone you distribute it to, and you also want to give them the right to share who uses it. If you wish to use this software under Open Source Licensing, you must contribute all your source code to the open source community in accordance with the GPL Version 2 when your application is distributed. See <ulink url="http://www.gnu.org/copyleft/gpl.html">http://www.gnu.org/copyleft/gpl.html</ulink></para>
<para><simplesect kind="par"><title>Commercial Licensing</title><para></para>
</simplesect>
This is the appropriate option if you are creating proprietary applications and you are not prepared to distribute and share the source code of your application. Contact <ulink url="mailto:info@airspayce.com">info@airspayce.com</ulink> for details (do not use this address for anything other than commercial license enquiries. For all other queries, using the RadioHead mailing list).</para>
<para><simplesect kind="par"><title>Revision History</title><para></para>
</simplesect>
<simplesect kind="version"><para>1.1 2014-04-14<linebreak/>
 Initial public release </para>
</simplesect>
<simplesect kind="version"><para>1.2 2014-04-23<linebreak/>
 Fixed various typos. <linebreak/>
 Added links to compatible Anarduino products.<linebreak/>
 Added RHNRFSPIDriver, RH_NRF24 classes to support Nordic NRF24 based radios. </para>
</simplesect>
<simplesect kind="version"><para>1.3 2014-04-28<linebreak/>
 Various documentation fixups.<linebreak/>
 RHDatagram::setThisAddress() did not set the local copy of thisAddress. Reported by Steve Childress.<linebreak/>
 Fixed a problem on Teensy with RF22 and RF69, where the interrupt pin needs to be set for input, <linebreak/>
 else pin interrupt doesn&apos;t work properly. Reported by Steve Childress and patched by Adrien van den Bossche. Thanks.<linebreak/>
 Fixed a problem that prevented RF22 honouring setPromiscuous(true). Reported by Steve Childress.<linebreak/>
 Updated documentation to clarify some issues to do with maximum message lengths reported by Steve Childress.<linebreak/>
 Added support for yield() on systems that support it (currently Arduino 1.5.5 and later) so that spin-loops can suport multitasking. Suggested by Steve Childress.<linebreak/>
 Added RH_RF22::setGpioReversed() so the reversal it can be configured at run-time after radio initialisation. It must now be called <emphasis>after</emphasis> init(). Suggested by Steve Childress.<linebreak/>
 </para>
</simplesect>
<simplesect kind="version"><para>1.4 2014-04-29<linebreak/>
 Fixed further problems with Teensy compatibility for RH_RF22. Tested on Teensy 3.1. The example/rf22_* examples now run out of the box with the wiring connections as documented for Teensy in RH_RF22.<linebreak/>
 Added YIELDs to spin-loops in RHRouter, RHMesh and RHReliableDatagram, RH_NRF24.<linebreak/>
 Tested RH_Serial examples with Teensy 3.1: they now run out of the box.<linebreak/>
 Tested RH_ASK examples with Teensy 3.1: they now run out of the box.<linebreak/>
 Reduced default SPI speed for NRF24 from 8MHz to 1MHz on Teensy, to improve reliability when poor wiring is in use.<linebreak/>
 on some devices such as Teensy.<linebreak/>
 Tested RH_NRF24 examples with Teensy 3.1: they now run out of the box.<linebreak/>
 </para>
</simplesect>
<simplesect kind="version"><para>1.5 2014-04-29<linebreak/>
 Added support for Nordic Semiconductor nRF905 transceiver with RH_NRF905 driver. Also added examples for nRF905 and tested on Teensy 3.1 </para>
</simplesect>
<simplesect kind="version"><para>1.6 2014-04-30<linebreak/>
 NRF905 examples were missing </para>
</simplesect>
<simplesect kind="version"><para>1.7 2014-05-03<linebreak/>
 Added support for Arduino Due. Tested with RH_NRF905, RH_Serial, RH_ASK. IMPORTANT CHANGE to interrupt pins on Arduino with RH_RF22 and RH_RF69 constructors: previously, you had to specify the interrupt <emphasis>number</emphasis> not the interrupt <emphasis>pin</emphasis>. Arduinos and Uno32 are now consistent with all other platforms: you must specify the interrupt pin number. Default changed to pin 2 (a common choice with RF22 shields). Removed examples/maple/maple_rf22_reliable_datagram_client and examples/maple/maple_rf22_reliable_datagram_client since the rf22 examples now work out of the box with Flymaple. Removed examples/uno32/uno32_rf22_reliable_datagram_client and examples/uno32/uno32_rf22_reliable_datagram_client since the rf22 examples now work out of the box with ChipKit Uno32. </para>
</simplesect>
<simplesect kind="version"><para>1.8 2014-05-08 <linebreak/>
 Added support for YIELD in Teensy 2 and 3, suggested by Steve Childress.<linebreak/>
 Documentation updates. Clarify use of headers and Flags<linebreak/>
 Fixed misalignment in RH_RF69 between ModemConfigChoice definitions and the implemented choices which meant you didnt get the choice you thought and GFSK_Rb55555Fd50 hung the transmitter.<linebreak/>
 Preliminary work on Linux simulator. </para>
</simplesect>
<simplesect kind="version"><para>1.9 2014-05-14 <linebreak/>
 Added support for using Timer 2 instead of Timer 1 on Arduino in RH_ASK when RH_ASK_ARDUINO_USE_TIMER2 is defined. With the kind assistance of Luc Small. Thanks!<linebreak/>
 Updated comments in RHReliableDatagram concerning servers, retries, timeouts and delays. Fixed an error in RHReliableDatagram where recvfrom return value was not checked. Reported by Steve Childress.<linebreak/>
 Added Linux simulator support so simple RadioHead sketches can be compiled and run on Linux.<linebreak/>
 Added RH_TCP driver to permit message passing between simulated sketches on Linux.<linebreak/>
 Added example simulator sketches.<linebreak/>
 Added tools/etherSimulator.pl, a simulator of the &apos;Luminiferous Ether&apos; that passes messages between simulated sketches and can simulate random message loss etc.<linebreak/>
 Fixed a number of typos and improved some documentation.<linebreak/>
 </para>
</simplesect>
<simplesect kind="version"><para>1.10 2014-05-15 <linebreak/>
 Added support for RFM73 modules to RH_NRF24. These 2 radios are very similar, and can interoperate with each other. Added new RH_NRF24::TransmitPower enums for the RFM73, which has a different range of available powers<linebreak/>
 reduced the default SPI bus speed for RH_NRF24 to 1MHz, since so many modules and CPU have problems with 8MHz.<linebreak/>
 </para>
</simplesect>
<simplesect kind="version"><para>1.11 2014-05-18<linebreak/>
 Testing RH_RF22 with RFM23BP and 3.3V Teensy 3.1 and 5V Arduinos. Updated documentation with respect to GPIO and antenna control pins for RFM23. Updated documentation with respect to transmitter power control for RFM23<linebreak/>
 Fixed a problem with RH_RF22 driver, where GPIO TX and RX pins were not configured during initialisation, causing poor transmit power and sensitivity on those RF22/RF23 devices where GPIO controls the antenna selection pins. </para>
</simplesect>
<simplesect kind="version"><para>1.12 2014-05-20<linebreak/>
 Testing with RF69HW and the RH_RF69 driver. Works well with the Anarduino MiniWireless -CW and -HW boards <ulink url="http://www.anarduino.com/miniwireless/">http://www.anarduino.com/miniwireless/</ulink> including the marvellous high powered MinWireless-HW (with 20dBm output for excellent range).<linebreak/>
 Clarified documentation of RH_RF69::setTxPower values for different models of RF69.<linebreak/>
 Added RHReliableDatagram::resetRetransmissions().<linebreak/>
 Retransmission count precision increased to uin32_t.<linebreak/>
 Added data about actual power measurements from RFM22 module.<linebreak/>
 </para>
</simplesect>
<simplesect kind="version"><para>1.13 2014-05-23<linebreak/>
 setHeaderFlags(flags) changed to setHeaderFlags(set, clear), enabling any flags to be individually set and cleared by either RadioHead or application code. Requested by Steve Childress.<linebreak/>
 Fixed power output setting for boost power on RF69HW for 18, 19 and 20dBm.<linebreak/>
 Added data about actual power measurements from RFM69W and RFM69HW modules.<linebreak/>
 </para>
</simplesect>
<simplesect kind="version"><para>1.14 2014-05-26<linebreak/>
 RH_RF69::init() now always sets the PA boost back to the default settings, else can get invalid PA power modes after uploading new sketches without a power cycle. Reported by Bryan.<linebreak/>
 Added new macros RH_VERSION_MAJOR RH_VERSION_MINOR, with automatic maintenance in Makefile.<linebreak/>
 Improvements to RH_TCP: constructor now honours the server argument in the form &quot;servername:port&quot;.<linebreak/>
 Added YIELD to RHReliableDatagram::recvfromAckTimeout. Requested by Steve Childress.<linebreak/>
 Fixed a problem with RH_RF22 reliable datagram acknowledgements that was introduced in version 1.13. Reported by Steve Childress.<linebreak/>
 </para>
</simplesect>
<simplesect kind="version"><para>1.15 2014-05-27<linebreak/>
 Fixed a problem with the RadioHead .zip link. </para>
</simplesect>
<simplesect kind="version"><para>1.16 2014-05-30 <linebreak/>
 Fixed RH_RF22 so that lastRssi() returns the signal strength in dBm. Suggested by Steve Childress.<linebreak/>
 Added support for getLastPreambleTime() to RH_RF69. Requested by Steve Childress.<linebreak/>
 RH_NRF24::init() now checks if there is a device connected and responding, else init() will fail. Suggested by Steve Brown.<linebreak/>
 RHSoftwareSPI now initialises default values for SPI pins MOSI = 12, MISO = 11 and SCK = 13.<linebreak/>
 Fixed some problems that prevented RH_NRF24 working with mixed software and hardware SPI on different devices: a race condition due to slow SPI transfers and fast acknowledgement.<linebreak/>
 </para>
</simplesect>
<simplesect kind="version"><para>1.17 2014-06-02 <linebreak/>
 Fixed a debug typo in RHReliableDatagram that was introduced in 1.16.<linebreak/>
 RH_NRF24 now sets default power, data rate and channel in init(), in case another app has previously set different values without powerdown.<linebreak/>
 Caution: there are still problems with RH_NRF24 and Software SPI. Do not use.<linebreak/>
 </para>
</simplesect>
<simplesect kind="version"><para>1.18 2014-06-02<linebreak/>
 Improvements to performance of RH_NRF24 statusRead, allowing RH_NRF24 and Software SPI to operate on slow devices like Arduino Uno.<linebreak/>
 </para>
</simplesect>
<simplesect kind="version"><para>1.19 2014-06-19<linebreak/>
 Added examples ask_transmitter.pde and ask_receiver.pde.<linebreak/>
 Fixed an error in the RH_RF22 doc for connection of Teensy to RF22.<linebreak/>
 Improved documentation of start symbol bit patterns in RH_ASK.cpp </para>
</simplesect>
<simplesect kind="version"><para>1.20 2014-06-24<linebreak/>
 Fixed a problem with compiling on platforms such as ATTiny where SS is not defined.<linebreak/>
 Added YIELD to RHMesh::recvfromAckTimeout().<linebreak/>
 </para>
</simplesect>
<simplesect kind="version"><para>1.21 2014-06-24<linebreak/>
 Fixed an issue in RH_Serial where characters might be lost with back-to-back frames. Suggested by Steve Childress.<linebreak/>
 Brought previous RHutil/crc16.h code into mainline RHCRC.cpp to prevent name collisions with other similarly named code in other libraries. Suggested by Steve Childress.<linebreak/>
 Fix SPI bus speed errors on 8MHz Arduinos. </para>
</simplesect>
<simplesect kind="version"><para>1.22 2014-07-01<linebreak/>
 Update RH_ASK documentation for common wiring connections.<linebreak/>
 Testing RH_ASK with HopeRF RFM83C/RFM85 courtesy Anarduino <ulink url="http://www.anarduino.com/">http://www.anarduino.com/</ulink><linebreak/>
 Testing RH_NRF24 with Itead Studio IBoard Pro <ulink url="http://imall.iteadstudio.com/iboard-pro.html">http://imall.iteadstudio.com/iboard-pro.html</ulink> using both hardware SPI on the ITDB02 Parallel LCD Module Interface pins and software SPI on the nRF24L01+ Module Interface pins. Documented wiring required.<linebreak/>
 Added support for AVR 1284 and 1284p, contributed by Peter Scargill. Added support for Semtech SX1276/77/78 and HopeRF RFM95/96/97/98 and other similar LoRa capable radios in LoRa mode only. Tested with the excellent MiniWirelessLoRa from Anarduino <ulink url="http://www.anarduino.com/miniwireless">http://www.anarduino.com/miniwireless</ulink><linebreak/>
 </para>
</simplesect>
<simplesect kind="version"><para>1.23 2014-07-03<linebreak/>
 Changed the default modulation for RH_RF69 to GFSK_Rb250Fd250, since the previous default was not very reliable.<linebreak/>
 Documented <ref refid="classRH__RF95" kindref="compound">RH_RF95</ref> range tests.<linebreak/>
 Improvements to RH_RF22 RSSI readings so that lastRssi correctly returns the last message in dBm.<linebreak/>
 </para>
</simplesect>
<simplesect kind="version"><para>1.24 2014-07-18 Added support for building RadioHead for STM32F4 Discovery boards, using the native STM Firmware libraries, in order to support Codec2WalkieTalkie (<ulink url="http://www.airspayce.com/mikem/Codec2WalkieTalkie">http://www.airspayce.com/mikem/Codec2WalkieTalkie</ulink>) and other projects. See STM32ArduinoCompat.<linebreak/>
 Default modulation for <ref refid="classRH__RF95" kindref="compound">RH_RF95</ref> was incorrectly set to a very slow Bw125Cr48Sf4096 </para>
</simplesect>
<simplesect kind="version"><para>1.25 2014-07-25 The available() function will longer terminate any current transmission, and force receive mode. Now, if there is no unprocessed incoming message and an outgoing message is currently being transmitted, available() will return false.<linebreak/>
 RHRouter::sendtoWait(uint8_t*, uint8_t, uint8_t, uint8_t) renamed to sendtoFromSourceWait due to conflicts with new sendtoWait() with optional flags.<linebreak/>
 RHMEsh and RHRouter already supported end-to-end application layer flags, but RHMesh::sendtoWait() and RHRouter::sendToWait have now been extended to expose a way to send optional application layer flags. </para>
</simplesect>
<simplesect kind="version"><para>1.26 2014-08-12 Fixed a Teensy 2.0 compile problem due yield() not available on Teensy &lt; 3.0. <linebreak/>
 Adjusted the algorithm of RH_RF69::temperatureRead() to more closely reflect reality.<linebreak/>
 Added functions to <ref refid="classRHGenericDriver" kindref="compound">RHGenericDriver</ref> to get driver packet statistics: rxBad(), rxGood(), txGood().<linebreak/>
 Added RH_RF69::printRegisters().<linebreak/>
 <ref refid="classRH__RF95_1af82a441a5946b538f60f31e727009750" kindref="member">RH_RF95::printRegisters()</ref> was incorrectly printing the register index instead of the address. Reported by Phang Moh Lim.<linebreak/>
 <ref refid="classRH__RF95" kindref="compound">RH_RF95</ref>, added definitions for some more registers that are usable in LoRa mode.<linebreak/>
 <ref refid="classRH__RF95_1ab273e242758e3cc2ed2679ef795a7196" kindref="member">RH_RF95::setTxPower</ref> now uses RH_RF95_PA_DAC_ENABLE to achieve 21, 22 and 23dBm.<linebreak/>
 <ref refid="classRH__RF95" kindref="compound">RH_RF95</ref>, updated power output measurements.<linebreak/>
 Testing RH_RF69 on Teensy 3.1 with RF69 on PJRC breakout board. OK.<linebreak/>
 Improvements so RadioHead will build under Arduino where SPI is not supported, such as ATTiny.<linebreak/>
 Improvements so RadioHead will build for ATTiny using Arduino IDE and tinycore arduino-tiny-0100-0018.zip.<linebreak/>
 Testing RH_ASK on ATTiny85. Reduced RAM footprint. Added helpful documentation. Caution: RAM memory is <emphasis>very</emphasis> tight on this platform.<linebreak/>
 RH_RF22 and RH_RF69, added setIdleMode() function to allow the idle mode radio operating state to be controlled for lower idle power consumption at the expense of slower transitions to TX and RX.<linebreak/>
 </para>
</simplesect>
<simplesect kind="version"><para>1.27 2014-08-13 All RH_RF69 modulation schemes now have data whitening enabled by default.<linebreak/>
 Tested and added a number of OOK modulation schemes to RH_RF69 Modem config table.<linebreak/>
 Minor improvements to a number of the faster RH_RF69 modulation schemes, but some slower ones are still not working correctly.<linebreak/>
 </para>
</simplesect>
<simplesect kind="version"><para>1.28 2014-08-20 Added new RH_RF24 driver to support Si446x, RF24/26/26, RFM24/26/27 family of transceivers. Tested with the excellent Anarduino Mini and RFM24W and RFM26W with the generous assistance of the good people at Anarduino <ulink url="http://www.anarduino.com">http://www.anarduino.com</ulink>. </para>
</simplesect>
<simplesect kind="version"><para>1.29 2014-08-21 Fixed a compile error in RH_RF24 introduced at the last minute in hte previous release.<linebreak/>
 Improvements to RH_RF69 modulation schemes: now include the AFCBW in teh ModemConfig.<linebreak/>
 ModemConfig RH_RF69::FSK_Rb2Fd5 and RH_RF69::GFSK_Rb2Fd5 are now working.<linebreak/>
 </para>
</simplesect>
<simplesect kind="version"><para>1.30 2014-08-25 Fixed some compile problems with ATtiny84 on Arduino 1.5.5 reported by Glen Cook.<linebreak/>
 </para>
</simplesect>
<simplesect kind="version"><para>1.31 2014-08-27 Changed RH_RF69 FSK and GFSK modulations from Rb2_4Fd2_4 to Rb2_4Fd4_8 and FSK_Rb4_8Fd4_8 to FSK_Rb4_8Fd9_6 since the previous ones were unreliable (they had modulation indexes of 1).<linebreak/>
 </para>
</simplesect>
<simplesect kind="version"><para>1.32 2014-08-28 Testing with RedBearLab Blend board <ulink url="http://redbearlab.com/blend/">http://redbearlab.com/blend/</ulink>. OK.<linebreak/>
 Changed more RH_RF69 FSK and GFSK slowish modulations to have modulation index of 2 instead of 1. This required chnaging the symbolic names.<linebreak/>
 </para>
</simplesect>
<simplesect kind="version"><para>1.33 2014-09-01 Added support for sleep mode in RHGeneric driver, with new mode RHModeSleep and new virtual function sleep().<linebreak/>
 Added support for sleep to RH_RF69, RH_RF22, RH_NRF24, RH_RF24, <ref refid="classRH__RF95" kindref="compound">RH_RF95</ref> drivers.<linebreak/>
 </para>
</simplesect>
<simplesect kind="version"><para>1.34 2014-09-19 Fixed compile errors in example rf22_router_test.<linebreak/>
 Fixed a problem with RH_NRF24::setNetworkAddress, also improvements to RH_NRF24 register printing. Patched by Yveaux.<linebreak/>
 Improvements to RH_NRF24 initialisation for version 2.0 silicon.<linebreak/>
 Fixed problem with ambigiguous print call in RH_RFM69 when compiling for Codec2.<linebreak/>
 Fixed a problem with RH_NRF24 on RFM73 where the LNA gain was not set properly, reducing the sensitivity of the receiver. </para>
</simplesect>
<simplesect kind="version"><para>1.35 2014-09-19 Fixed a problem with interrupt setup on <ref refid="classRH__RF95" kindref="compound">RH_RF95</ref> with Teensy3.1. Reported by AD.<linebreak/>
 </para>
</simplesect>
<simplesect kind="version"><para>1.36 2014-09-22 Improvements to interrupt pin assignments for <bold>AVR_ATmega1284</bold> and__AVR_ATmega1284P__, provided by Peter Scargill.<linebreak/>
 Work around a bug in Arduino 1.0.6 where digitalPinToInterrupt is defined but NOT_AN_INTERRUPT is not.<linebreak/>
 </para>
</simplesect>
<simplesect kind="version"><para>1.37 2014-10-19 Updated doc for connecting RH_NRF24 to Arduino Mega.<linebreak/>
 Changes to <ref refid="classRHGenericDriver_1acb992b3c5e360e68b67e4843558bcf3b" kindref="member">RHGenericDriver::setHeaderFlags()</ref>, so that the default for the clear argument is now RH_FLAGS_APPLICATION_SPECIFIC, which is less surprising to users. Testing with the excellent MoteinoMEGA from LowPowerLab <ulink url="https://lowpowerlab.com/shop/moteinomega">https://lowpowerlab.com/shop/moteinomega</ulink> with on-board RFM69W. </para>
</simplesect>
<simplesect kind="version"><para>1.38 2014-12-29 Fixed compile warning on some platforms where RH_RF24::send and RH_RF24::writeTxFifo did not return a value.<linebreak/>
 Fixed some more compiler warnings in RH_RF24 on some platforms.<linebreak/>
 Refactored printRegisters for some radios. Printing to Serial is now controlled by the definition of RH_HAVE_SERIAL.<linebreak/>
 Added partial support for ARM M4 w/CMSIS with STM&apos;s Hardware Abstraction lib for Steve Childress.<linebreak/>
 </para>
</simplesect>
<simplesect kind="version"><para>1.39 2014-12-30 Fix some compiler warnings under IAR.<linebreak/>
 RH_HAVE_SERIAL and Serial.print calls removed for ATTiny platforms.<linebreak/>
 </para>
</simplesect>
<simplesect kind="version"><para>1.40 2015-03-09 Added notice about availability on PlatformIO, thanks to Ivan Kravets.<linebreak/>
 Fixed a problem with RH_NRF24 where short packet lengths would occasionally not be trasmitted due to a race condition with RH_NRF24_TX_DS. Reported by Mark Fox.<linebreak/>
 </para>
</simplesect>
<simplesect kind="version"><para>1.41 2015-03-29 RH_RF22, RH_RF24, RH_RF69 and <ref refid="classRH__RF95" kindref="compound">RH_RF95</ref> improved to allow driver.init() to be called multiple times without reallocating a new interrupt, allowing the driver to be reinitialised after sleeping or powering down. </para>
</simplesect>
<simplesect kind="version"><para>1.42 2015-05-17 Added support for RH_NRF24 driver on Raspberry Pi, using BCM2835 library for GPIO pin IO. Contributed by Mike Poublon.<linebreak/>
 Tested RH_NRF24 module with NRF24L01+PA+LNA SMA Antenna Wireless Transceiver modules similar to: <ulink url="http://www.elecfreaks.com/wiki/index.php?title=2.4G_Wireless_nRF24L01p_with_PA_and_LNA">http://www.elecfreaks.com/wiki/index.php?title=2.4G_Wireless_nRF24L01p_with_PA_and_LNA</ulink> works with no software changes. Measured max power output 18dBm.<linebreak/>
 </para>
</simplesect>
<simplesect kind="version"><para>1.43 2015-08-02 Added RH_NRF51 driver to support Nordic nRF51 family processor with 2.4GHz radio such as nRF51822, to be built on Arduino 1.6.4 and later. Tested with RedBearLabs nRF51822 board and BLE Nano kit<linebreak/>
 </para>
</simplesect>
<simplesect kind="version"><para>1.44 2015-08-08 Fixed errors with compiling on some platforms without serial, such as ATTiny. Reported by Friedrich Müller.<linebreak/>
 </para>
</simplesect>
<simplesect kind="version"><para>1.45 2015-08-13 Added support for using RH_Serial on Linux and OSX (new class RHutil/HardwareSerial encapsulates serial ports on those platforms). Example examples/serial upgraded to build and run on Linux and OSX using the tools/simBuild builder. RHMesh, RHRouter and RHReliableDatagram updated so they can use RH_Serial without polling loops on Linux and OSX for CPU efficiency.<linebreak/>
 </para>
</simplesect>
<simplesect kind="version"><para>1.46 2015-08-14 Amplified some doc concerning Linux and OSX RH_Serial. Added support for 230400 baud rate in HardwareSerial.<linebreak/>
 Added sample sketches nrf51_audio_tx and nrf51_audio_rx which show how to build an audio TX/RX pair with RedBear nRF51822 boards and a SparkFun MCP4725 DAC board. Uses the built-in ADC of the nRF51822 to sample audio at 5kHz and transmit packets to the receiver which plays them via the DAC.<linebreak/>
 </para>
</simplesect>
<simplesect kind="version"><para>1.47 2015-09-18 Removed top level Makefile from distribution: its only used by the developer and its presence confuses some people.<linebreak/>
 Fixed a problem with RHReliableDatagram with some versions of Raspberry Pi random() that causes problems: random(min, max) sometimes exceeds its max limit. </para>
</simplesect>
<simplesect kind="version"><para>1.48 2015-09-30 Added support for Arduino Zero. Tested on Arduino Zero Pro. </para>
</simplesect>
<simplesect kind="version"><para>1.49 2015-10-01 Fixed problems that prevented interrupts working correctly on Arduino Zero and Due. Builds and runs with 1.6.5 (with &apos;Arduino SAMD Boards&apos; for Zero version 1.6.1) from arduino.cc. Arduino version 1.7.7 from arduino.org is not currently supported. </para>
</simplesect>
<simplesect kind="version"><para>1.50 2015-10-25 Verified correct building and operation with Arduino 1.7.7 from arduino.org. Caution: You must burn the bootloader from 1.7.7 to the Arduino Zero before it will work with Arduino 1.7.7 from arduino.org. Conversely, you must burn the bootloader from 1.6.5 to the Arduino Zero before it will work with Arduino 1.6.5 from arduino.cc. Sigh. Fixed a problem with RH_NRF905 that prevented the power and frequency ranges being set properly. Reported by Alan Webber. </para>
</simplesect>
<simplesect kind="version"><para>1.51 2015-12-11 Changes to RH_RF6::setTxPower() to be compatible with SX1276/77/78/79 modules that use RFO transmitter pins instead of PA_BOOST, such as the excellent Modtronix inAir4 <ulink url="http://modtronix.com/inair4.html">http://modtronix.com/inair4.html</ulink> and inAir9 modules <ulink url="http://modtronix.com/inair9.html">http://modtronix.com/inair9.html</ulink>. With the kind assistance of David from Modtronix. </para>
</simplesect>
<simplesect kind="version"><para>1.52 2015-12-17 Added RH_MRF89 module to suport Microchip MRF89XA and compatible transceivers. and modules.<linebreak/>
 </para>
</simplesect>
<simplesect kind="version"><para>1.53 2016-01-02 Added RH_CC110 module to support Texas Instruments CC110L and compatible transceivers and modules.<linebreak/>
 </para>
</simplesect>
<simplesect kind="version"><para>1.54 2016-01-29 Added support for ESP8266 processor on Arduino IDE. Examples serial_reliable_datagram_* are shown to work. CAUTION: SPI not supported yet. Timers used by RH_ASK are not tested. The GHz radio included in the ESP8266 is not yet supported. </para>
</simplesect>
<simplesect kind="version"><para>1.55 2016-02-12 Added macros for <ref refid="LoRaNodeV4_2RadioHead_2RadioHead_8h_1a51799f5ebb4c7228ef7e95c247030f42" kindref="member">htons()</ref> and friends to RadioHead.h. Added example sketch serial_gateway.pde. Acts as a transparent gateway between RH_RF22 and RH_Serial, and with minor mods acts as a universal gateway between any 2 RadioHead driver networks. Initial work on supporting STM32 F2 on Particle Photon: new platform type defined. Fixed many warnings exposed by test building for Photon. Particle Photon tested support for RH_Serial, RH_ASK, SPI, RH_CC110 etc. Added notes on how to build RadioHead sketches for Photon. </para>
</simplesect>
<simplesect kind="version"><para>1.56 2016-02-18 Implemented timers for RH_ASK on ESP8266, added some doc on IO pin selection. </para>
</simplesect>
<simplesect kind="version"><para>1.57 2016-02-23 Fixed an issue reported by S3B, where RH_RF22 would sometimes not clear the rxbufvalid flag. </para>
</simplesect>
<simplesect kind="version"><para>1.58 2-16-04-04 Tested RH_RF69 with Arduino Due. OK. Updated doc.<linebreak/>
 Added support for all ChipKIT Core supported boards <ulink url="http://chipkit.net/wiki/index.php?title=ChipKIT_core">http://chipkit.net/wiki/index.php?title=ChipKIT_core</ulink> Tested on ChipKIT Uno32.<linebreak/>
 Digilent Uno32 under the old MPIDE is no longer formally supported but may continue to work for some time.<linebreak/>
 </para>
</simplesect>
<simplesect kind="version"><para>1.59 2016-04-12 Testing with the excellent Rocket Scream Mini Ultra Pro with the RFM95W and RFM69HCW modules from <ulink url="http://www.rocketscream.com/blog/product/mini-ultra-pro-with-radio/">http://www.rocketscream.com/blog/product/mini-ultra-pro-with-radio/</ulink> (915MHz versions). Updated documentation with hints to suit. Caution: requires Arduino 1.6.8 and Arduino SAMD Boards 1.6.5. See also <ulink url="http://www.rocketscream.com/blog/2016/03/10/radio-range-test-with-rfm69hcw/">http://www.rocketscream.com/blog/2016/03/10/radio-range-test-with-rfm69hcw/</ulink> for the vendors tests and range with the RFM69HCW version. These boards are highly recommended. They also include battery charging support.</para>
</simplesect>
<simplesect kind="author"><para>Mike McCauley. DO NOT CONTACT THE AUTHOR DIRECTLY. USE THE MAILING LIST GIVEN ABOVE </para>
</simplesect>
</para>
    </detaileddescription>
    <location file="/home/chris/Documents/farm-sensors/LoRaNodeV4/RadioHead/RadioHead.h"/>
  </compounddef>
</doxygen>
