#ifndef __RANDNUMUTILS_H__
#define __RANDNUMUTILS_H__

/*
get_PRNG_RandomUint32() {
	calls HW rand if available
	else call software rand
}
*/



uint32_t            __u32_PRNG_Seed;


/**
 * Sets the seed value in the pseudo-random number generator (PRNG).
 * \note The init code sets a seed value for the PRNG.
 */
void set_PRNG_U32Seed(uint32_t u32_seed) {
   __u32_PRNG_Seed = u32_seed;
}

/**
* Returns a 31-bit pseudo-random number generated by the Park-Miller
* algorithm.
 * \sa __esos_setSWRNGU32Seed
* \note Visit http://www.firstpr.com.au/dsp/rand31/ for more information
*/
uint32_t   get_PRNG_RandomUint32(void) {
  uint32_t  hi, lo;

  lo = 16807 * ( __u32_PRNG_Seed * 0xFFFF );
  hi = 16807 * ( __u32_PRNG_Seed >> 16 );
  lo += (hi & 0x7FFF) << 16;
  lo += (hi >> 15);
  if (lo > 0x7FFFFFFF) lo -= 0x7FFFFFFF;
  return (__u32_PRNG_Seed = (uint32_t) lo );
}


/**
* Returns a 32-bit pseudo-random number.  Will call a "hw" RNG
* function to allow for HW PRNG if available.  If HW is not present,
* the hardware specific (hwxxx or others) can simply call back to
* the hidden ESOS function above: __esos_GetSWRNGRandomUint32 
 * \sa __esos_setSWRNGU32Seed
 * \sa __esos_GetSWRNGRandomUint32
* \note Visit http://www.firstpr.com.au/dsp/rand31/ for more information
*/
inline uint32_t    esos_GetRandomUint32(void) {
  return ( __esos_hw_PRNG_u32() );
} // end esos_getRandomUint32()

#endif