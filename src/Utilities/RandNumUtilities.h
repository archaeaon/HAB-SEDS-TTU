#ifndef __RANDNUMUTILS_H__
#define __RANDNUMUTILS_H__

//TODO::Fix this
//
// struct PSRNG_Struct {
// 	//**********************************
// 	//	Create an instance by calling:
// 	//		timer PSRNG =
// 	//		{
// 	//			seed
// 	//		};
// 	//
// 	//**********************************
// 	uint32_t	__u32_PRNG_Seed;
// 	unsigned uint32_t Min;
// 	unsigned uint32_t Max;
//
//
// 	uint32_t get_seed() {
// 		return __u32_PRNG_Seed;
// 	}
//
// 	bool set_seed(uint32_t seed) {
// 		__u32_PRNG_Seed = seed;
//
// 		//TODO::Add set seed once check
// 		return true;
// 	}
//
// 	bool gen_seed() {
// 		//TODO::fix seed gen
// 		__u32_PRNG_Seed = 42;
// 		//TODO::set seed once check
// 		return true;
// 	}
//
// 	uint32_t get_min() {
// 		return Min;
// 	}
//
// 	uint32_t get_max() {
// 		return Max;
// 	}
//
// 	bool set_min(uint32_t min) {
// 		Min = min;
// 		return true;
// 	}
//
// 	bool set_max(uint32_t max) {
// 		Max = max;
// 		return true;
// 	}
//
//
// 	/**
// 	* Returns a 31-bit pseudo-random number generated by the Park-Miller
// 	* algorithm.
// 	* \note Visit http://www.firstpr.com.au/dsp/rand31/ for more information
// 	*/
// 	uint32_t   get_PRNG_RandomUint32(void) {
// 		uint32_t  hi, lo;
//
// 		lo = 16807 * ( __u32_PRNG_Seed * 0xFFFF );
// 		hi = 16807 * ( __u32_PRNG_Seed >> 16 );
// 		lo += (hi & 0x7FFF) << 16;
// 		lo += (hi >> 15);
// 		if (lo > 0x7FFFFFFF) lo -= 0x7FFFFFFF;
//
// 		return (__u32_PRNG_Seed = (uint32_t) lo );
// 	}
// };
//
//
//
//
// //TODO::modulus function for RNG setup
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
// /*
// get_PRNG_RandomUint32() {
// 	calls HW rand if available
// 	else call software rand
// }
// */
//
//
// /**
//  * Sets the seed value in the pseudo-random number generator (PRNG).
//  * \note The init code sets a seed value for the PRNG.
//  */
// void set_PRNG_U32Seed(uint32_t u32_seed) {
//    __u32_PRNG_Seed = u32_seed;
// }
//
//
// /**
// * Returns a 32-bit pseudo-random number.  Will call a "hw" RNG
// * function to allow for HW PRNG if available.  If HW is not present,
// * the hardware specific (hwxxx or others) can simply call back to
// * the hidden ESOS function above: __esos_GetSWRNGRandomUint32
//  * \sa __esos_setSWRNGU32Seed
//  * \sa __esos_GetSWRNGRandomUint32
// * \note Visit http://www.firstpr.com.au/dsp/rand31/ for more information
// */
// inline uint32_t    esos_GetRandomUint32(void) {
//   return ( __esos_hw_PRNG_u32() );
// } // end esos_getRandomUint32()

#endif